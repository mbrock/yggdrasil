// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var Node, NodeView, addNode, finishLoggingInAs, makeLeafElement, nodes;
    Node = (function(_super) {

      __extends(Node, _super);

      function Node() {
        return Node.__super__.constructor.apply(this, arguments);
      }

      return Node;

    })(Backbone.Model);
    NodeView = (function(_super) {

      __extends(NodeView, _super);

      function NodeView() {
        this.submitReply = __bind(this.submitReply, this);

        this.toggleReplyForm = __bind(this.toggleReplyForm, this);

        this.render = __bind(this.render, this);

        this.initialize = __bind(this.initialize, this);
        return NodeView.__super__.constructor.apply(this, arguments);
      }

      NodeView.prototype.className = 'node';

      NodeView.prototype.template = _.template($('#node-template').html());

      NodeView.prototype.initialize = function() {
        _.bindAll(this);
        return this.render();
      };

      NodeView.prototype.render = function() {
        this.$el.append(this.template(this.model.toJSON()));
        this.replyForm = this.$el.children('.node-reply-form');
        this.replyForm.hide();
        $('.node-reply-link', this.$el).click(this.toggleReplyForm);
        return this.replyForm.submit(this.submitReply);
      };

      NodeView.prototype.toggleReplyForm = function() {
        this.replyForm.toggle();
        if (this.replyForm.is(':visible')) {
          $('textarea', this.replyForm).focus();
        }
        return false;
      };

      NodeView.prototype.submitReply = function() {
        var content,
          _this = this;
        content = $('textarea', this.replyForm).val();
        if (content != null) {
          $.ajax({
            type: 'PUT',
            url: "/" + (this.model.get('id')),
            data: content,
            success: function() {
              return _this.replyForm.hide();
            }
          });
        }
        return false;
      };

      return NodeView;

    })(Backbone.View);
    nodes = {};
    addNode = function(id, parentId, content) {
      var element, parent;
      parent = nodes[parentId];
      element = makeLeafElement(id, content);
      nodes[id] = {
        element: element
      };
      return parent.element.append(element);
    };
    makeLeafElement = function(id, content) {
      var node, view;
      node = new Node({
        id: id,
        content: content
      });
      view = new NodeView({
        model: node
      });
      return view.$el;
    };
    nodes['0'] = {
      element: makeLeafElement(0, '')
    };
    $("#tree").append(nodes[0].element);
    $.getJSON("/history", function(data) {
      var event, socket, _i, _len;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        event = data[_i];
        addNode.apply(null, event);
      }
      socket = new WebSocket("ws://" + location.hostname + ":8080");
      return socket.onopen = function(event) {
        return socket.onmessage = function(event) {
          return addNode.apply(null, JSON.parse(event.data));
        };
      };
    });
    $("#login-container button").click(function() {
      var username;
      username = $("#login-container input").val();
      $.ajax({
        type: 'POST',
        url: "/login/" + username,
        success: function() {
          return finishLoggingInAs(username);
        }
      });
      return false;
    });
    return finishLoggingInAs = function(username) {
      $("#login-container").empty();
      return $("#login-container").append($("<p class=\"navbar-text\">Logged in as <i>" + username + "</i></p>"));
    };
  });

}).call(this);
