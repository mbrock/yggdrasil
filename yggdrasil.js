// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var App, Branches, Node, NodeView, addNode, app, finishLoggingInAs, makeLeaf, nodes, rootNode;
    App = (function(_super) {

      __extends(App, _super);

      function App() {
        return App.__super__.constructor.apply(this, arguments);
      }

      return App;

    })(Backbone.Model);
    Node = (function(_super) {

      __extends(Node, _super);

      function Node() {
        this.lastNode = __bind(this.lastNode, this);

        this.addBranch = __bind(this.addBranch, this);

        this.initialize = __bind(this.initialize, this);
        return Node.__super__.constructor.apply(this, arguments);
      }

      Node.prototype.initialize = function() {
        var parent;
        this.branches = new Branches;
        if (parent = this.get('parent')) {
          return this.set('level', parent.get('level') + 1);
        } else {
          return this.set('level', 0);
        }
      };

      Node.prototype.addBranch = function(node) {
        return this.branches.add(node);
      };

      Node.prototype.lastNode = function() {
        if (this.branches.isEmpty()) {
          return this;
        } else {
          return this.branches.last().lastNode();
        }
      };

      return Node;

    })(Backbone.Model);
    Branches = (function(_super) {

      __extends(Branches, _super);

      function Branches() {
        this.add = __bind(this.add, this);
        return Branches.__super__.constructor.apply(this, arguments);
      }

      Branches.prototype.model = Node;

      Branches.prototype.add = function(child) {
        this.trigger('before-add', child);
        return Branches.__super__.add.call(this, child);
      };

      return Branches;

    })(Backbone.Collection);
    NodeView = (function(_super) {

      __extends(NodeView, _super);

      function NodeView() {
        this.submitReply = __bind(this.submitReply, this);

        this.toggleReplyForm = __bind(this.toggleReplyForm, this);

        this.setIndent = __bind(this.setIndent, this);

        this.render = __bind(this.render, this);

        this.addChild = __bind(this.addChild, this);

        this.initialize = __bind(this.initialize, this);
        return NodeView.__super__.constructor.apply(this, arguments);
      }

      NodeView.prototype.className = 'node';

      NodeView.prototype.template = _.template($('#node-template').html());

      NodeView.prototype.initialize = function() {
        this.render();
        this.model.view = this;
        return this.model.branches.on('before-add', this.addChild);
      };

      NodeView.prototype.addChild = function(child) {
        var childView;
        childView = new NodeView({
          model: child
        });
        return this.model.lastNode().view.$el.after(childView.$el);
      };

      NodeView.prototype.render = function() {
        var htmlContent;
        htmlContent = new Showdown.converter().makeHtml(this.model.get('content'));
        this.$el.append(this.template(_.extend(this.model.toJSON(), {
          htmlContent: htmlContent
        })));
        this.setIndent();
        this.replyForm = this.$el.children('.node-reply-form');
        this.replyForm.hide();
        $('.node-reply-link', this.$el).click(this.toggleReplyForm);
        return this.replyForm.submit(this.submitReply);
      };

      NodeView.prototype.setIndent = function() {
        return this.$el.css('margin-left', "" + (this.model.get('level')) + "em");
      };

      NodeView.prototype.toggleReplyForm = function() {
        this.replyForm.toggle();
        if (this.replyForm.is(':visible')) {
          $('textarea', this.replyForm).focus();
        }
        return false;
      };

      NodeView.prototype.submitReply = function() {
        var content,
          _this = this;
        content = $('textarea', this.replyForm).val();
        if ((content != null) && (app.get('sessionId') != null)) {
          $.ajax({
            type: 'POST',
            url: "/" + (this.model.get('nodeId')),
            data: {
              content: content,
              sessionId: app.get('sessionId')
            },
            success: function() {
              return _this.replyForm.hide();
            }
          });
        }
        return false;
      };

      return NodeView;

    })(Backbone.View);
    nodes = {};
    addNode = function(nodeInfo) {
      var leaf, parent;
      parent = nodes[nodeInfo.parentId];
      leaf = makeLeaf(parent, nodeInfo.nodeId, nodeInfo.content, nodeInfo.userId, nodeInfo.creationDate);
      nodes[nodeInfo.nodeId] = leaf;
      return parent.addBranch(leaf);
    };
    makeLeaf = function(parent, id, content, username, creationDate) {
      return new Node({
        parent: parent,
        nodeId: id,
        content: content,
        username: username,
        creationDate: creationDate
      });
    };
    rootNode = makeLeaf(null, 0, '', 'root', "2013-01-01T00:00:00.000Z");
    $("#tree").append(new NodeView({
      model: rootNode
    }).el);
    nodes[0] = rootNode;
    app = new App;
    document.yggdrasil = app;
    $.getJSON("/history", function(data) {
      var event, socket, _i, _len;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        event = data[_i];
        addNode(event);
      }
      socket = new WebSocket("ws://" + location.hostname + ":8080");
      return socket.onopen = function(event) {
        return socket.onmessage = function(event) {
          return addNode(JSON.parse(event.data));
        };
      };
    });
    $("#login-container button").click(function() {
      var username;
      username = $("#login-container input").val();
      $.ajax({
        type: 'POST',
        dataType: 'json',
        url: "/login/" + username,
        success: function(sessionId) {
          return finishLoggingInAs(username, sessionId);
        }
      });
      return false;
    });
    return finishLoggingInAs = function(username, sessionId) {
      $("#login-container").empty();
      $("#login-container").append($("<p class=\"navbar-text\">Logged in as <i>" + username + "</i></p>"));
      return app.set('sessionId', sessionId);
    };
  });

}).call(this);
